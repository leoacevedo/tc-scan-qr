{"version":3,"sources":["CameraChooser.js","QrScanner.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["CameraChooser","devices","videoRef","React","createRef","selectRef","selectedDevice","updateSelectedDevice","bind","video","this","current","deviceId","selectedOptions","value","navigator","mediaDevices","getUserMedia","width","height","exact","facingMode","then","stream","srcObject","play","callback","props","onDeviceChosen","className","ref","onChange","map","device","label","onClick","onDeviceSelected","Component","QrScanner","onQrScanned","BrowserQRCodeReader","decodeOnceFromVideoDevice","result","text","catch","err","console","error","Result","back","App","state","qrReader","showResults","showScanningScreen","script","document","createElement","src","async","body","appendChild","listVideoInputDevices","e","setState","newState","length","log","decoded","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c5880cc5.chunk.js","sourcesContent":["import React from 'react';\n\nclass CameraChooser extends React.Component {\n    constructor(devices) {\n      super()\n      this.videoRef = React.createRef()\n      this.selectRef = React.createRef()\n      this.selectedDevice = null;\n      this.updateSelectedDevice = this.updateSelectedDevice.bind(this)\n    }\n  \n    updateSelectedDevice() {\n      const video = this.videoRef.current\n      const dropDown = this.selectRef.current\n\n      const deviceId = dropDown.selectedOptions[0].value\n      this.selectedDevice = deviceId\n\n      navigator.mediaDevices.getUserMedia({ \n        video: {\n          width: 400,\n          height: 300,  \n        }, \n        deviceId: { \n          exact: deviceId \n        },\n        facingMode: \"environment\"\n      }).then(stream => {\n        video.srcObject = stream;\n        video.play();\n      });\n    }\n  \n    onDeviceSelected(callback) {\n        if (this.selectedDevice) {\n            callback(this.selectedDevice)\n        }\n    }\n\n    componentDidMount() {\n        this.updateSelectedDevice()        \n    }\n\n    render() {\n      const { devices, onDeviceChosen } = this.props\n      return <div className=\"cameraChooser\">\n        <h1>Elija la c&aacute;mara que va a usar</h1>\n        <select ref={this.selectRef} onChange={this.updateSelectedDevice }>\n          { \n            devices.map(device => {\n              const result = <option value={device.deviceId}>{device.label}</option>  \n              return result\n            })\n          }\n        </select>\n  \n        <video\n          ref={this.videoRef}\n          width=\"400\"\n          height=\"300\">\n        </video>\n  \n        <button onClick={() => this.onDeviceSelected(onDeviceChosen)}>Seleccionar</button>\n      </div>\n    }\n  }\n  \n\nexport default CameraChooser","import React from 'react'\nimport { BrowserQRCodeReader } from '@zxing/library';\n\nclass QrScanner extends React.Component {\n \n    constructor() {\n        super()\n        this.videoRef = React.createRef()\n    }\n\n    componentDidMount() {\n        const {deviceId, onQrScanned} = this.props\n\n        const codeReader = new BrowserQRCodeReader();\n        codeReader\n            .decodeOnceFromVideoDevice(deviceId, this.videoRef.current)\n                .then(result => onQrScanned(result.text))\n                .catch(err => console.error(err));        \n    }\n\n    render(props) {\n        return <div className=\"qrScanner\">\n            <h1>Escanee el c&oacute;digo QR</h1>\n            <video\n                ref={this.videoRef}\n                width=\"400\"\n                height=\"300\" />\n        </div>\n    }\n}  \n\nexport default QrScanner;","import React from 'react'\n\nclass Result extends React.Component {\n \n    render(props) {\n        const {back} = this.props\n        return <div className=\"results\">\n            <h1>Verificado: Pago #29373836372</h1>\n\n            <table>\n                <tr className=\"row-title\">\n                    <td>C&oacute;digo</td>\n                    <td>Descripci&oacute;n</td>\n                    <td>Cant.</td>\n                    <td>Precio</td>\n                </tr>\n                <tr className=\"row-odd\">\n                    <td>0001249</td>\n                    <td>Cerveza Stella Artois 975cc Ret</td>\n                    <td>8</td>\n                    <td>$1680</td>\n                </tr>\n                <tr className=\"row-even\">\n                    <td>0001688</td>\n                    <td>Papas Fritas Lays Cl&aacute;sicas 150Gr</td>\n                    <td>14</td>\n                    <td>$1400</td>\n                </tr>\n                <tr className=\"row-odd\">\n                    <td>0009248</td>\n                    <td>Rollos de cocina Elegante x 6u</td>\n                    <td>1</td>\n                    <td>$150</td>\n                </tr>\n                <tr className=\"row-even\">\n                    <td>0001688</td>\n                    <td>Galletitas Frutigran Avena x 12u</td>\n                    <td>5</td>\n                    <td>$702</td>\n                </tr>\n                <tr className=\"row-total\">\n                    <td>TOTAL</td>\n                    <td /><td />\n                    <td>${1680+1400+150+702}</td>\n                </tr>\n            </table>\n            <button className=\"bottomButton\" onClick={back}>Volver atr&aacute;s</button>       \n        </div>\n    }\n}  \n\nexport default Result;","import React from 'react';\nimport { BrowserQRCodeReader } from '@zxing/library';\n\nimport './App.css';\nimport CameraChooser from './CameraChooser';\nimport QrScanner from './QrScanner';\nimport Result from './Result';\n\nconst STATE_ERROR = -1;\nconst STATE_WAITING_FOR_CAMERAS = -2;\nconst STATE_CHOOSING_CAMERA = 0;\nconst STATE_SCANNING = 1;\nconst STATE_SHOWING_RESULT = 2;\n\nclass App extends React.Component {\n  \n  constructor() {\n    super()\n    this.state = {\n      state: STATE_WAITING_FOR_CAMERAS,\n      error: null,\n      devices: [],\n      selectedDevice: null\n    }\n    this.qrReader = new BrowserQRCodeReader()\n    this.onDeviceChosen = this.onDeviceChosen.bind(this)\n    this.showResults = this.showResults.bind(this)\n    this.showScanningScreen = this.showScanningScreen.bind(this)\n  }\n\n  componentDidMount () {\n    const script = document.createElement(\"script\");\n\n    script.src = \"http://webrtc.github.io/adapter/adapter-latest.js\";\n    script.async = true;\n\n    document.body.appendChild(script);\n\n    this.qrReader.listVideoInputDevices()\n      .catch((e) => {\n        console.error(e)\n        this.setState({\n          state: STATE_ERROR,\n          error: e, \n          devices: []\n        })\n      })\n      .then((devices) => {\n        const newState = devices.length == 1 ? STATE_SCANNING : STATE_CHOOSING_CAMERA\n        console.log(\"getting devices\")\n        this.setState({\n          state: newState,\n          devices, \n          error: null\n        })\n      })\n  }\n\n  onDeviceChosen(device) {\n    this.setState({\n      state: STATE_SCANNING,\n      selectedDevice: device\n    })\n  }\n  \n  showScanningScreen() {\n    this.onDeviceChosen(this.state.selectedDevice)\n  }\n\n  showResults(decoded) {\n    console.log(decoded)\n    this.setState({\n      state: STATE_SHOWING_RESULT\n    })\n  }\n\n  render() {\n    const state = this.state\n    switch(state.state) {\n      case STATE_WAITING_FOR_CAMERAS:\n        return <span className=\"waitingForCameras\">Waiting for camera devices...</span>\n        case STATE_CHOOSING_CAMERA:\n          return <CameraChooser \n          devices={state.devices}\n          onDeviceChosen={this.onDeviceChosen }\n        />\n      case STATE_SCANNING:\n        return <QrScanner\n          deviceId={state.selectedDevice}\n          onQrScanned={this.showResults}\n        />\n      case STATE_SHOWING_RESULT:\n        return <Result back={this.showScanningScreen}/>\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"App\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}