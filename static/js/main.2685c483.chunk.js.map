{"version":3,"sources":["CameraChooser.js","QrScanner.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["CameraChooser","devices","videoRef","React","createRef","selectRef","selectedDevice","stream","updateSelectedDevice","bind","video","this","current","deviceId","selectedOptions","value","getVideoTracks","stop","pause","srcObject","setTimeout","navigator","mediaDevices","getUserMedia","width","height","exact","then","play","callback","props","onDeviceChosen","className","ref","onChange","map","device","label","onClick","onDeviceSelected","Component","QrScanner","onQrScanned","BrowserQRCodeReader","decodeOnceFromVideoDevice","result","text","catch","err","console","error","Result","back","App","state","qrReader","showResults","showScanningScreen","e","setState","tracks","newState","length","log","decoded","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2685c483.chunk.js","sourcesContent":["import React from 'react';\n\nclass CameraChooser extends React.Component {\n    constructor(devices) {\n      super()\n      this.videoRef = React.createRef()\n      this.selectRef = React.createRef()\n      this.selectedDevice = null;\n      this.stream = null;\n      this.updateSelectedDevice = this.updateSelectedDevice.bind(this)\n    }\n  \n    updateSelectedDevice() {\n      const video = this.videoRef.current\n      const dropDown = this.selectRef.current\n\n      const deviceId = dropDown.selectedOptions[0].value\n      this.selectedDevice = deviceId\n\n      if (this.stream) {\n        for(let stream in this.stream.getVideoTracks) {\n            stream.stop()\n        };\n      }\n      video.pause()\n      video.srcObject = null\n\n      setTimeout(() => {\n        navigator.mediaDevices.getUserMedia({ \n            video: {\n                width: 360,\n                height: 270,  \n            }, \n            deviceId: { \n              exact: deviceId \n            },\n        }).then(stream => {\n            this.stream = stream\n            video.srcObject = stream;\n            video.play();\n        });\n      }, 1000)\n    }\n  \n    onDeviceSelected(callback) {\n        if (this.selectedDevice) {\n            callback(this.selectedDevice)\n        }\n    }\n\n    componentDidMount() {\n        this.updateSelectedDevice()        \n    }\n\n    render() {\n      const { devices, onDeviceChosen } = this.props\n      return <div className=\"cameraChooser\">\n        <h1>Elija la c&aacute;mara</h1>\n        <select ref={this.selectRef} onChange={this.updateSelectedDevice }>\n          { \n            devices.map(device => {\n              const result = <option value={device.deviceId}>{device.label}</option>  \n              return result\n            })\n          }\n        </select>\n  \n        <video\n          ref={this.videoRef}\n          width=\"400\"\n          height=\"300\">\n        </video>\n  \n        <button onClick={() => this.onDeviceSelected(onDeviceChosen)}>Seleccionar</button>\n      </div>\n    }\n  }\n  \n\nexport default CameraChooser","import React from 'react'\nimport { BrowserQRCodeReader } from '@zxing/library';\n\nclass QrScanner extends React.Component {\n \n    constructor() {\n        super()\n        this.videoRef = React.createRef()\n    }\n\n    componentDidMount() {\n        const {deviceId, onQrScanned} = this.props\n\n        const codeReader = new BrowserQRCodeReader();\n        codeReader\n            .decodeOnceFromVideoDevice(deviceId, this.videoRef.current)\n                .then(result => onQrScanned(result.text))\n                .catch(err => console.error(err));        \n    }\n\n    render(props) {\n        return <div className=\"qrScanner\">\n            <h1>Escanee el c&oacute;digo</h1>\n            <video\n                ref={this.videoRef}\n            />\n        </div>\n    }\n}  \n\nexport default QrScanner;","import React from 'react'\n\nclass Result extends React.Component {\n \n    render(props) {\n        const {back} = this.props\n        return <div className=\"results\">\n            <h1>Verificado: Pago #29373832</h1>\n\n            <table>\n                <thead>\n                    <tr className=\"row-title\">\n                        <td>C&oacute;digo</td>\n                        <td>Descripci&oacute;n</td>\n                        <td>Cant.</td>\n                        <td>Precio</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr className=\"row-odd\">\n                        <td>0001249</td>\n                        <td className=\"td-description\">Cerveza Stella Artois 975cc Ret</td>\n                        <td>8</td>\n                        <td>$1680</td>\n                    </tr>\n                    <tr className=\"row-even\">\n                        <td>0001688</td>\n                        <td className=\"td-description\">Papas Fritas Lays Cl&aacute;sicas 150Gr</td>\n                        <td>14</td>\n                        <td>$1400</td>\n                    </tr>\n                    <tr className=\"row-odd\">\n                        <td>0009248</td>\n                        <td className=\"td-description\">Rollos de cocina Elegante x 6u</td>\n                        <td>1</td>\n                        <td>$150</td>\n                    </tr>\n                    <tr className=\"row-even\">\n                        <td>0001688</td>\n                        <td className=\"td-description\"><span>Galletitas Frutigran Avena x 12u</span></td>\n                        <td>5</td>\n                        <td>$702</td>\n                    </tr>\n                    <tr className=\"row-total\">\n                        <td>TOTAL</td>\n                        <td /><td />\n                        <td>${1680+1400+150+702}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <button className=\"bottomButton\" onClick={back}>Volver atr&aacute;s</button>       \n        </div>\n    }\n}  \n\nexport default Result;","import React from 'react';\nimport { BrowserQRCodeReader } from '@zxing/library';\n\nimport './App.css';\nimport CameraChooser from './CameraChooser';\nimport QrScanner from './QrScanner';\nimport Result from './Result';\n\nconst STATE_ERROR = -1;\nconst STATE_WAITING_FOR_CAMERAS = -2;\nconst STATE_CHOOSING_CAMERA = 0;\nconst STATE_SCANNING = 1;\nconst STATE_SHOWING_RESULT = 2;\n\nclass App extends React.Component {\n  \n  constructor() {\n    super()\n    this.state = {\n      // state: STATE_SHOWING_RESULT,\n      state: STATE_WAITING_FOR_CAMERAS,\n      error: null,\n      devices: [],\n      selectedDevice: null\n    }\n    this.qrReader = new BrowserQRCodeReader()\n    this.onDeviceChosen = this.onDeviceChosen.bind(this)\n    this.showResults = this.showResults.bind(this)\n    this.showScanningScreen = this.showScanningScreen.bind(this)\n  }\n\n  componentDidMount () {\n    navigator.mediaDevices.getUserMedia({\n      video: true\n    })\n      .catch((e) => {\n        console.error(e)\n        this.setState({\n          state: STATE_ERROR,\n          error: e, \n          devices: []\n        })\n      })\n      .then(stream => {\n        return stream.getVideoTracks() \n      })\n      .then(tracks => {\n        const newState = tracks.length == 1 ? STATE_SCANNING : STATE_CHOOSING_CAMERA\n        console.log(tracks)\n        this.setState({\n          state: newState,\n          devices: tracks, \n          error: null\n        })\n      })\n  }\n\n  onDeviceChosen(device) {\n    this.setState({\n      state: STATE_SCANNING,\n      selectedDevice: device\n    })\n  }\n  \n  showScanningScreen() {\n    this.onDeviceChosen(this.state.selectedDevice)\n  }\n\n  showResults(decoded) {\n    console.log(decoded)\n    this.setState({\n      state: STATE_SHOWING_RESULT\n    })\n  }\n\n  render() {\n    const state = this.state\n    switch(state.state) {\n      case STATE_WAITING_FOR_CAMERAS:\n        return <span className=\"waitingForCameras\">Waiting for camera devices...</span>\n        case STATE_CHOOSING_CAMERA:\n          return <CameraChooser \n          devices={state.devices}\n          onDeviceChosen={this.onDeviceChosen }\n        />\n      case STATE_SCANNING:\n        return <QrScanner\n          deviceId={state.selectedDevice}\n          onQrScanned={this.showResults}\n        />\n      case STATE_SHOWING_RESULT:\n        return <Result back={this.showScanningScreen}/>\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"App\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}